<Info>
  Description    	Perform WGCNA in R and import network results, Loading table back to AS
Author         	Jeff Du 
Created        	04/23/2019 
Updated		      

<Input>
  
  ImportAnnotation=True
user_dir = 
  wgcna_dir =
  
  Heightcutoff =
  SmallClustersize = 
  
  Trait = 
  Module = 
  
  
  <Output>
  SampleClustering.pdf
sampleClustering2.pdf
sampleClusteringDendrogram.pdf
Count-dataInput.RData
LocusLinkIDs_all
geneInfo.output
screenTab.out 

<Script>
  
  
  #############################################################
## input expression, design and annotation tables
dat <- as.data.frame( input.data )
des <- as.data.frame( input.design )
ano <- as.data.frame( input.annotation )

Height <- input.parameters[["Heightcutoff"]]
ClusterSize <- input.parameters[["SmallClustersize"]]
user.dir <- input.parameters[["user_dir"]]
wgcna.dir <- input.parameters[["wgcna_dir"]]

trait.select <- input.parameters[["Trait"]]
module.select <- input.parameters[["Module"]]

################################################################
## Count not choose directory by choose.dir() function on server
## 

# workingDir <- choose.dir(getwd(), "Choose a suitable folder")
# output_dir <- choose.dir(getwd(), "Choose a suitable folder")

#############################################################################
## installing all necessary packages/dependencies would take 1-1.5 hours
# 
# install.packages("BiocManager") 
# BiocManager::install("WGCNA") 
# 
# 
# install.packages(  c("matrixStats", "Hmisc", 
#                       "splines", "foreach", 
#                       "doParallel", "fastcluster", 
#                       "dynamicTreeCut", "survival")) # 
# 
# 
# install.packages('Rcpp')
# install.packages('colorspace')
# install.packages('stringi')
# 
# source("http://bioconductor.org/biocLite.R") 
# biocLite(c("GO.db", "preprocessCore", "impute")) 
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("impute")

##########################################################
# Load the WGCNA package
library(WGCNA)



#=====================================================================================
#
#  Code Section 1.1
#
#=====================================================================================



# Display the current working directory
getwd();
print( getwd() )
# If necessary, change the path below to the directory where the data files are stored. 
# "." means current directory. On Windows use a forward slash / instead of the usual \.

###################
## this is the physical direcotry for all users in my test server
## we might need to change it to Biogen server path

physical.dir = "/scratch/Omicsoft/BaseDirectory/FtpRoot/Users/"

workingDir = paste0(physical.dir, user.dir, "/", wgcna.dir)

print(workingDir)

dir.create(file.path(workingDir), showWarnings = TRUE)


setwd(workingDir); 

## check if Plots sub-directory is available, if not, create one;
plot.dir <- "/Plots"
dir.create(file.path(workingDir, plot.dir), showWarnings = TRUE)


# Load the WGCNA package
library(WGCNA);

# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);


#Read in the count expression data set
count.data = dat

# read.table("timecourse_log2counts.txt", header = TRUE, row.names = 1, sep = "\t");

# Take a quick look at what is in the data set:
print( dim(count.data) )
print( names(count.data) );


#=====================================================================================
#
#  Code Section 1.2
#
#=====================================================================================

# in the biogen original datasheets, the counts are combined with meta info
# in OmicData objects, counts are independent to design table
# so, we do not need to remove extra columns from count table, just t() it;


datExpr.count <- as.data.frame( t(count.data) )

print( datExpr.count[1:5, 1:5] )

#=====================================================================================
#
#  Code Section 1.3
#
#=====================================================================================


gsg.count <- goodSamplesGenes( datExpr.count, verbose = 3 )
gsg.count$allOK

#=====================================================================================
#
#  Code Section 1.4
#
#=====================================================================================


if (!gsg.count$allOK)
{
  # Optionally, print the gene and sample names that were removed:
  if (sum(!gsg.count$goodGenes)>0) 
    printFlush(paste("Removing genes:", paste(names(datExpr.count)[!gsg.count$goodGenes], collapse = ", ")));
  if (sum(!gsg.count$goodSamples)>0) 
    printFlush(paste("Removing samples:", paste(rownames(datExpr.count)[!gsg.count$goodSamples], collapse = ", ")));
  # Remove the offending genes and samples from the data:
  datExpr.count = datExpr.count[gsg.count$goodSamples, gsg.count$goodGenes]
}



#=====================================================================================
#
#  Code Section 1.5
#
#=====================================================================================


sampleTree = hclust(dist(datExpr.count), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.

sizeGrWindow(12,9)

pdf(file = "Plots/P1_sampleClustering.pdf", width = 12, height = 9);

par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, 
     cex.axis = 1.5, cex.main = 2)

dev.off()

#####################################################################
## 
sampleTree.count = hclust(dist(datExpr.count), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.

sizeGrWindow(12,9)

pdf(file = "Plots/P1_sampleClustering2.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree.count, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, 
     cex.axis = 1.5, cex.main = 2)



#=====================================================================================
#
#  Code Section 1.6
#
#=====================================================================================


#######################################
# Plot a line to show the cut
# 

abline(h = Height, col = "red");

dev.off() 



# Determine cluster under the line
# by default Height = 25, minSize = 3

# print( paste("height: ", str(Height), "minSize: ", ClusterSize) )

clust = cutreeStatic(sampleTree.count, cutHeight = as.numeric(Height), minSize = as.numeric(ClusterSize) )
table(clust)

# clust 1 contains the samples we want to keep.
keepSamples = (clust==1)
keepSamples

datExpr = datExpr.count[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)



#=====================================================================================
#
#  Code Section 1.7
#
#=====================================================================================



####################################################

# design.data = read.table("timecourse_log2counts_Design2.txt", header = TRUE, row.names = 1, sep = "\t");

design.data <- des

dim(design.data)
names(design.data)

print( design.data[1:5, 1:5] )

print( head(design.data) ) 


## only keep the numerical columns in the design; 
design.data = design.data[ , -c(3, 4, 11)]


allTraits <- as.data.frame( design.data )

dim(allTraits)
names(allTraits)

# Form a data frame analogous to expression data that will hold the clinical traits.
rownames(datExpr)

count.Samples = rownames(datExpr);
count.Samples
rownames( allTraits )

# allTraits$ID

traitRows = match(count.Samples, rownames(allTraits));

datTraits = allTraits[traitRows, -1];
dim(datTraits)
rownames(datTraits)

# rownames(datTraits) = allTraits[traitRows, 1];

collectGarbage();


#=====================================================================================
#
#  Code Section 1.8
#
#=====================================================================================


# Re-cluster samples
sampleTree2 = hclust(dist(datExpr), method = "average")

head(datTraits)
datTraits$RIN <- NULL
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors( datTraits, signed = FALSE);

# Plot the sample dendrogram and the colors underneath.


sizeGrWindow(12,9)

pdf(file = "Plots/P1_sampleClusteringDendrogram.pdf", width = 12, height = 9);


plotDendroAndColors(sampleTree2, traitColors,
                    groupLabels = names(datTraits), 
                    main = "Sample dendrogram and trait heatmap")
dev.off() 


#=====================================================================================
#
#  Code Section 1.9
#
#=====================================================================================


save(datExpr, datTraits, file = "Count-01-dataInput.RData")

SampleClustering.pdf          <- paste0(workingDir, "/Plots/P1_SampleClustering.pdf")
sampleClustering2.pdf         <- paste0(workingDir, "/Plots/P1_SampleClustering2.pdf")
sampleClusteringDendrogram.pdf<- paste0(workingDir, "/Plots/P1_sampleClusteringDendrogram.pdf")

#Count-dataInput.RData         <- paste0(workingDir, "/Count-01-dataInput.RData") 






###############################################################################################
##
##    Automatic, one-step network construction and module detection
##
###############################################################################################


#=====================================================================================
#
#  Code Section 2.1
#
#=====================================================================================


# Display the current working directory
getwd();
# If necessary, change the path below to the directory where the data files are stored. 
# "." means current directory. On Windows use a forward slash / instead of the usual \.


workingDir = getwd()
setwd(workingDir); 

# Load the WGCNA package
library(WGCNA)

# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);

# Allow multi-threading within WGCNA. This helps speed up certain calculations.
# At present this call is necessary for the code to work.
# Any error here may be ignored but you may want to update WGCNA if you see one.
# Caution: skip this line if you run RStudio or other third-party R environments. 
# See note above.
enableWGCNAThreads()

# Load the data saved in the first part
lnames = load(file = "Count-01-dataInput.RData");

#The variable lnames contains the names of loaded variables.
lnames


#=====================================================================================
#
#  Code Section 2.2
#
#=====================================================================================


# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))

# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)

# Plot the results:


sizeGrWindow(9, 5)

pdf(file = "Plots/P2_Network_topology.pdf", width = 24, height = 9);

par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"));

text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red");

# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")

# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     main = paste("Mean connectivity"))

text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")

dev.off() 


#=====================================================================================
#
#  Code Section 2.3
#
#=====================================================================================


net = blockwiseModules(datExpr, power = 6,
                       TOMType = "unsigned", minModuleSize = 30,
                       reassignThreshold = 0, mergeCutHeight = 0.25,
                       numericLabels = TRUE, pamRespectsDendro = FALSE,
                       saveTOMs = TRUE,
                       saveTOMFileBase = "countMouseTOM", 
                       verbose = 3)


#=====================================================================================
#
#  Code Section 2.4
#
#=====================================================================================


# open a graphics window
sizeGrWindow(12, 9)


pdf(file = "Plots/P2_Cluster_dendrogram.pdf", width = 24, height = 9);

# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)


# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
                    "Module colors",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)

dev.off()


#=====================================================================================
#
#  Code Section 2.5
#
#=====================================================================================


moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs;
geneTree = net$dendrograms[[1]];
save(MEs, moduleLabels, moduleColors, geneTree, 
     file = "Count-02-networkConstruction-auto.RData")




#####################################################################################


#########################################################################################
##
##  Section III
##  Relating modules to external clinical traits and identifying important genes 
##
#########################################################################################

#=====================================================================================
#
#  Code Section 3.1
#
#=====================================================================================


# Display the current working directory
print( getwd() );

# If necessary, change the path below to the directory where the data files are stored. 
# "." means current directory. On Windows use a forward slash / instead of the usual \.


workingDir = getwd()
setwd(workingDir); 

# Load the WGCNA package
 library(WGCNA)
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);

# Load the expression and trait data saved in the first part
lnames = load(file = "Count-01-dataInput.RData");

#The variable lnames contains the names of loaded variables.
lnames
# Load network data saved in the second part.
lnames = load(file = "Count-02-networkConstruction-auto.RData");
lnames


#=====================================================================================
#
#  Code Section 3.2
#
#=====================================================================================


# Define numbers of genes and samples
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);

# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);


#=====================================================================================
#
#  Code Section 3.3
#
#=====================================================================================


# sizeGrWindow(12, 9)


pdf(file = "Plots/P3_Correlation_heatmap.pdf", width = 12, height = 9);

sizeGrWindow(12, 9)

# Will display correlations and their p-values
textMatrix =  paste(signif(moduleTraitCor, 2), "\n(",
                    signif(moduleTraitPvalue, 1), ")", sep = "");

dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = names(datTraits),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = greenWhiteRed(50),
               textMatrix = textMatrix,
               setStdMargins = FALSE,
               cex.text = 0.5,
               zlim = c(-1,1),
               main = paste("Module-trait relationships"))

dev.off() 


#=====================================================================================
#
#  Code Section 3.4
#
#=====================================================================================

######################################################################
# Define variable brain containing the brain column of datTrait
# need to specify which column from the design to choose
# 

#brain = as.data.frame(datTraits$brain);
#names(brain) = "brain"

trait.selected <- as.character( trait.select)
print(trait.selected)

trait.index <- which(colnames(datTraits) == trait.selected)

## define trait.df data frame
trait.df = data.frame( datTraits[, trait.index] )
print( dim(trait.df) )


names( trait.df ) = trait.selected

# names (colors) of the modules
modNames = substring(names(MEs), 3)

geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));

names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");

geneTraitSignificance = as.data.frame(cor(datExpr, trait.df, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));

names(geneTraitSignificance) = paste("GS.", names(trait.df), sep="");
names(GSPvalue) = paste("p.GS.", names(trait.df), sep="");


#=====================================================================================
#
#  Code Section 3.5
#
#=====================================================================================


module = "brown"
module = as.character( module.select )

column = match(module, modNames);
moduleGenes = moduleColors==module;




pdf(file = "Plots/P3_verbose_scatter_plot.pdf", width = 12, height = 9);

sizeGrWindow(12, 9);

par(mfrow = c(1,1));
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
                   abs(geneTraitSignificance[moduleGenes, 1]),
                   xlab = paste("Module Membership in", module, "module"),
                   ylab = paste("Gene significance for" , trait.selected),
                   main = paste("Module membership vs. gene significance\n"),
                   cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)

dev.off()

#=====================================================================================
#
#  Code Section 3.6
#
#=====================================================================================


names(datExpr)


#=====================================================================================
#
#  Code Section 3.7
#
#=====================================================================================


names(datExpr)[moduleColors== as.character( module.select ) ]


#=====================================================================================
#
#  Code Section 3.8
#
#=====================================================================================


# annot = read.csv(file = "GeneAnnotation.csv");
# annot = read.table("timecourse_log2counts_Annotation.txt", header = T, sep = "\t")

annot = ano

dim(annot)
row.names(annot)
head(annot)


probes = names(datExpr)
probes
probes2annot = match(probes, row.names(annot) )

# The following is the number or probes without annotation:
sum(is.na(probes2annot))
# Should return 0.


#=====================================================================================
#
#  Code Section 3.9
#
#=====================================================================================


# Create the starting data frame
geneInfo0 = data.frame(column = probes,
                       #geneSymbol = annot$geneSymbol[probes2annot],
                       #geneName = annot$geneName[probes2annot],
                       moduleColor = moduleColors,
                       geneTraitSignificance,
                       GSPvalue)

# print out the header of geneInfo0
print( dim(geneInfo0) )
print( head(geneInfo0) )


# Order modules by their significance for brain
#modOrder = order(-abs(cor(MEs, selected.df, use = "p")));

modOrder = order(-abs(cor(MEs, trait.df, use = "p")));


# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership))
{
  oldNames = names(geneInfo0)
  geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]], 
                         MMPvalue[, modOrder[mod]]);
  names(geneInfo0) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
                       paste("p.MM.", modNames[modOrder[mod]], sep=""))
}

# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificance
# 
select.col <- paste0("GS.", trait.selected)

gsselect.index <- which(colnames(geneInfo0) == select.col)

# geneInfo0$GS.brain

geneOrder = order(geneInfo0$moduleColor, -abs(geneInfo0[, gsselect.index]));
geneInfo = geneInfo0[geneOrder, ]


#=====================================================================================
#
#  Code Section 3.10
#
#=====================================================================================


write.csv(geneInfo, file = "P3_geneInfo.csv")


geneInfo.output <- geneInfo



